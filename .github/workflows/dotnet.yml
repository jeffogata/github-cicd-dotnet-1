name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: pwsh

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of SonarCloud analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"jeffogata_github-cicd-dotnet-1" /o:"jeffogata" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-restore
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    # See https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md
    # for documentation on coverlet properties, including a note on the use of '%2c' for commas in a 
    # comma separated list in powershell

    # Run tests and produce a merged coverlet json results file
    - name: Test
      run: dotnet test -m:1 --no-build --verbosity normal 
        /p:CollectCoverage=true 
        /p:CoverletOutput=../../.coverage/
        /p:MergeWith=../../.coverage/coverage.json

    # We can't set a threshold with the previous step because coverlet reports on each test project 
    # as it's being tested and includes 0% coverage for every other test project in the solution that 
    # hasn't been run yet.  The threshold is checked for each test project and those 0's fail the build.
    
    # Instead, we run coverlet once more, excluding all tests and set a threshold now that we have results
    # for all test projects.  We also output the final merged results to lcov format for coveralls.io
    - name: Check coverage threshold and convert to lcov for coveralls
      run: dotnet test --no-build --verbosity minimal --list-tests 
        /p:CollectCoverage=true 
        /p:CoverletOutput=../../.coverage/
        /p:MergeWith=../../.coverage/coverage.json
        /p:CoverletOutputFormat="lcov"
        /p:Exclude="[*]*"
        /p:Threshold=50

    - name: Publish coverage to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: .coverage/coverage.info
